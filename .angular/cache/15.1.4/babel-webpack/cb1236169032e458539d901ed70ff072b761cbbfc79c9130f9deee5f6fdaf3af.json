{"ast":null,"code":"import { from, of, Subject } from \"rxjs\";\nimport { filter, map, switchMap, take } from \"rxjs/operators\";\nimport { LibrarySaveSnackComponent } from \"../components/library-save-snack/library-save-snack.component\";\nimport { NotificationService } from \"./notification-service\";\nimport { LoginErrorComponent } from \"../../features/login/error/login-error/login-error.component\";\nimport { AngularFireAuth } from \"@angular/fire/compat/auth\";\nimport { AngularFirestore } from \"@angular/fire/compat/firestore\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/compat/auth\";\nimport * as i2 from \"@angular/fire/compat/firestore\";\nimport * as i3 from \"./notification-service\";\nexport class MainService {\n  constructor(fireAuth, fireDB, notificationService) {\n    this.fireAuth = fireAuth;\n    this.fireDB = fireDB;\n    this.notificationService = notificationService;\n    this.libraryUpdate = new Subject();\n    this.saveState = new Subject();\n    this.spinner = new Subject();\n    this.progress = new Subject();\n    this.library = {};\n  }\n  transferToLibrary(category, item) {\n    const categories = Object.entries(this.library).map(entry => entry[0]);\n    if (categories.indexOf(category) < 0) {\n      this.library[category] = {\n        allImages: [],\n        searchDate: new Date().toLocaleString(\"pl-PL\")\n      };\n    }\n    this.library[category].allImages.push(item);\n    this.library[category].searchDate = new Date().toLocaleString(\"pl-PL\");\n    this.libraryUpdate.next();\n    this.saveState.next(true);\n  }\n  getLibrary() {\n    return {\n      ...this.library\n    };\n  }\n  deleteCategory(category) {\n    delete this.library[category];\n    this.libraryUpdate.next();\n    this.saveState.next(true);\n  }\n  loadFirebaseData() {\n    const firebaseShot = this.initLibraryIfEmpty();\n    this.spinner.next(true);\n    const fireBase = this.fireAuth.user.pipe(take(1), filter(usrData => !!usrData), map(usrData => usrData.uid), switchMap(userId => firebaseShot(userId)));\n    fireBase.subscribe(firebaseData => {\n      this.library = {\n        ...firebaseData\n      };\n      this.libraryUpdate.next();\n      this.saveState.next(false);\n      this.spinner.next(false);\n    });\n  }\n  notifyMessage(message, config) {\n    this.notificationService.simpleNotification(message, \"Close\", config);\n  }\n  saveNotify() {\n    this.notificationService.notificationWithGif(LibrarySaveSnackComponent);\n  }\n  saveLibraryToFirebase() {\n    const library = this.library;\n    const batch = this.fireDB.firestore.batch();\n    const fireLibraryRef = userId => this.fireDB.firestore.doc(\"users/\" + userId);\n    from(this.fireAuth.currentUser).pipe(switchMap(user => from(batch.set(fireLibraryRef(user.uid), {\n      library\n    }).commit()))).subscribe(() => {\n      this.saveNotify();\n      this.saveState.next(false);\n    }, errorMsg => this.notificationService.notificationWithGif(LoginErrorComponent, {\n      data: errorMsg,\n      duration: 8000\n    }));\n  }\n  getImage(category, id) {\n    return this.library[category].allImages[id];\n  }\n  deleteImage(category, image) {\n    const imageToRm = this.library[category].allImages.findIndex(inLibrary => inLibrary.id === image.id);\n    this.library[category].allImages.splice(imageToRm, 1);\n    this.libraryUpdate.next();\n  }\n  initLibraryIfEmpty() {\n    return userId => this.fireDB.doc(\"users/\" + userId).get().pipe(switchMap(data => {\n      if (data.data()) {\n        return of(data.data().library);\n      } else {\n        return from(this.fireDB.firestore.batch().set(this.fireDB.firestore.doc(\"users/\" + userId), {\n          library: {}\n        }).commit());\n      }\n    }));\n  }\n}\nMainService.ɵfac = function MainService_Factory(t) {\n  return new (t || MainService)(i0.ɵɵinject(i1.AngularFireAuth), i0.ɵɵinject(i2.AngularFirestore), i0.ɵɵinject(i3.NotificationService));\n};\nMainService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: MainService,\n  factory: MainService.ɵfac,\n  providedIn: \"root\"\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}