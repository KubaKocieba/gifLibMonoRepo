{"ast":null,"code":"import { NgZone } from \"@angular/core\";\nimport { Router } from \"@angular/router\";\nimport { forkJoin, from, of } from \"rxjs\";\nimport { map, switchMap } from \"rxjs/operators\";\nimport { LoginErrorComponent } from \"../../features/login/error/login-error/login-error.component\";\nimport { NotificationService } from \"./notification-service\";\nimport { AngularFirestore } from \"@angular/fire/compat/firestore\";\nimport { getAuth, signInWithEmailAndPassword, signInWithPopup, GoogleAuthProvider, FacebookAuthProvider, createUserWithEmailAndPassword, sendPasswordResetEmail, signOut } from \"firebase/auth\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/compat/firestore\";\nimport * as i2 from \"./notification-service\";\nimport * as i3 from \"@angular/router\";\nexport class AuthService {\n  constructor(firestore, notificationService, router, ngZone) {\n    this.firestore = firestore;\n    this.notificationService = notificationService;\n    this.router = router;\n    this.ngZone = ngZone;\n  }\n  signInByEmailAndPass(email, password) {\n    const firebaseShot = this.createLibraryIfNotExistingForUser();\n    const auth = getAuth();\n    from(signInWithEmailAndPassword(auth, email, password)).pipe(map(({\n      user\n    }) => user.uid), switchMap(userId => firebaseShot(userId))).subscribe(() => this.goToSearch(), msg => this.signInError(msg));\n  }\n  googleSignIn() {\n    const firebaseShot = this.createLibraryIfNotExistingForUser();\n    const auth = getAuth();\n    const provider = new GoogleAuthProvider();\n    from(signInWithPopup(auth, provider)).pipe(map(({\n      user\n    }) => user.uid), switchMap(userId => firebaseShot(userId))).subscribe(() => this.goToSearch());\n  }\n  facebookSignIn() {\n    const firebaseShot = this.createLibraryIfNotExistingForUser();\n    const auth = getAuth();\n    const provider = new FacebookAuthProvider();\n    from(signInWithPopup(auth, provider)).pipe(map(({\n      user\n    }) => user.uid), switchMap(userId => firebaseShot(userId))).subscribe(() => this.goToSearch());\n  }\n  goToSearch() {\n    this.ngZone.run(() => {\n      this.router.navigate([\"search\"]);\n    });\n  }\n  signOut() {\n    const auth = getAuth();\n    signOut(auth).then(() => this.router.navigate([\"signIn\"]));\n  }\n  createUser(email, password) {\n    const firebaseShot = this.createLibraryIfNotExistingForUser();\n    const sendVerification = user => this.verificationEmailResend()(user);\n    const auth = getAuth();\n    from(createUserWithEmailAndPassword(auth, email, password)).pipe(switchMap(({\n      user\n    }) => {\n      // @ts-ignore\n      return forkJoin(sendVerification(user), firebaseShot(user.uid));\n    })).subscribe(() => {\n      this.notificationService.simpleNotification(\"Verification email sent\");\n      this.router.navigate([\"signIn\"]);\n    }, msg => this.signInError(msg));\n  }\n  signInError(msg) {\n    this.notificationService.notificationWithGif(LoginErrorComponent, {\n      data: msg,\n      duration: 8000\n    });\n  }\n  sendResetPassword(email) {\n    const auth = getAuth();\n    sendPasswordResetEmail(auth, email).then(() => this.resetPassNotification());\n  }\n  verificationEmailResend() {\n    console.log(user);\n    return user => from(user.sendEmailVerification());\n  }\n  noPassResetEmail() {\n    this.notificationService.simpleNotification(\"Please fill email\");\n  }\n  resetPassNotification() {\n    this.notificationService.simpleNotification(\"Password reset email sent, check your inbox.\");\n  }\n  createLibraryIfNotExistingForUser() {\n    return userId => this.firestore.doc(\"users/\" + userId).get().pipe(switchMap(data => {\n      if (data.data()) {\n        return of(null);\n      } else {\n        return from(this.firestore.firestore.batch().set(this.firestore.firestore.doc(\"users/\" + userId), {\n          library: {}\n        }).commit());\n      }\n    }));\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.AngularFirestore), i0.ɵɵinject(i2.NotificationService), i0.ɵɵinject(i3.Router), i0.ɵɵinject(i0.NgZone));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: \"root\"\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}