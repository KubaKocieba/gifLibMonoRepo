{"ast":null,"code":"import { map, switchMap, take, tap } from \"rxjs/operators\";\nimport { DomSanitizer } from \"@angular/platform-browser\";\nimport { BehaviorSubject, forkJoin } from \"rxjs\";\nimport { UntypedFormBuilder, Validators } from \"@angular/forms\";\nimport { HttpService } from \"../../../core/http/http.service\";\nimport { MainService } from \"../../../shared/services/main.service\";\nimport { DEFAULT_FRAME_RATE, Res } from \"../shared/video-converter-options.interfaces\";\nimport { DEFAULT_folder_VALUE } from \"../upload-file.component\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../../../core/http/http.service\";\nimport * as i3 from \"../../../shared/services/main.service\";\nimport * as i4 from \"@angular/platform-browser\";\nconst UPLOAD_MESSAGES = {\n  sizeExceeded: \"File upload aborted due to exceeded file size! Limit is 15MB\",\n  wrongType: \"Wrong image type. We require video file!\",\n  loadOK: \"Whoa! File successfully loaded dude!\"\n};\nexport class UploadFileService {\n  constructor(fb, httpService, mainService, sanitizer) {\n    this.fb = fb;\n    this.httpService = httpService;\n    this.mainService = mainService;\n    this.sanitizer = sanitizer;\n    this._uploadedFile = null;\n    this._videoURL = null;\n    this._convertedFile = null;\n    this._convertedURL = null;\n    this.converting$ = new BehaviorSubject(false);\n    this.loadedVideo$ = new BehaviorSubject(false);\n  }\n  get uploadedFile() {\n    return this._uploadedFile;\n  }\n  set uploadedFile(newFile) {\n    this._uploadedFile = newFile;\n  }\n  get videoURL() {\n    return this._videoURL;\n  }\n  set videoURL(newURL) {\n    this._videoURL = newURL;\n  }\n  get convertedFile() {\n    return this._convertedFile;\n  }\n  set convertedFile(newFile) {\n    this._convertedFile = newFile;\n  }\n  get convertedURL() {\n    return this._convertedURL;\n  }\n  set convertedURL(newURL) {\n    this._convertedURL = newURL;\n  }\n  getConvertingState() {\n    return this.converting$.asObservable();\n  }\n  getLoadedVideoState() {\n    return this.loadedVideo$.asObservable();\n  }\n  setLoadedVideoState(state) {\n    return this.loadedVideo$.next(state);\n  }\n  buildUploadAndConvertForm() {\n    return this.fb.group({\n      imageInput: this.fb.control(null, [Validators.required]),\n      resolution: this.fb.control(Res.Medium, Validators.required),\n      conversionFrameRate: this.fb.control(DEFAULT_FRAME_RATE, Validators.required),\n      tags: this.fb.control(\"\"),\n      folder: this.fb.control(DEFAULT_folder_VALUE)\n    });\n  }\n  fileLoad(event) {\n    const file = event.target.files[0];\n    if (event.target.files && event.target.files[0]) {\n      const reader = new FileReader();\n      reader.onloadstart = ev => {\n        const limit = 1024 * 1024 * 15;\n        const size = ev.total;\n        const sizeExceeded = size > limit;\n        const wrongType = !file.type.includes(\"video\");\n        if (sizeExceeded || wrongType) {\n          reader.abort();\n          this.videoURL = null;\n          this.uploadedFile = null;\n          this.loadedVideo$.next(false);\n          const message = sizeExceeded ? \"sizeExceeded\" : \"wrongType\";\n          this.mainService.notifyMessage(UPLOAD_MESSAGES[message]);\n          return;\n        }\n      };\n      reader.onloadend = () => {\n        this.videoURL = reader.result;\n        this.uploadedFile = file;\n        this.mainService.notifyMessage(UPLOAD_MESSAGES.loadOK);\n      };\n      reader.readAsDataURL(file);\n    }\n  }\n  giveAvailableResolutions(ratio) {\n    return Object.values(Res).map(res => {\n      const defaultRes = res.split(\"x\");\n      const defRes = {\n        width: defaultRes[0],\n        height: defaultRes[1]\n      };\n      const computedHeight = Math.floor(Number(defRes.width) / ratio);\n      return `${defRes.width}x${computedHeight}`;\n    });\n  }\n  convertGifFromConverterToUrl(responseFile) {\n    const urlCreate = window.URL;\n    this.convertedFile = responseFile;\n    this.converting$.next(false);\n    this.convertedURL = this.sanitizer.bypassSecurityTrustResourceUrl(urlCreate.createObjectURL(responseFile));\n  }\n  uploadToLibrary(tags, category) {\n    const fileData = {\n      file: this.convertedFile,\n      name: `${this.uploadedFile.name.split(\".\")[0]}.gif`\n    };\n    forkJoin(this.httpService.giphyUpload(fileData, tags).pipe(switchMap(response => this.httpService.upoloadedGiphyFileIdToGifObject(`${response.data.id}`)), map(response => response.data), tap(result => this.mainService.transferToLibrary(category, result))), this.mainService.libraryUpdate.pipe(take(1))).subscribe(() => {\n      this.mainService.saveLibraryToFirebase();\n    }, err => this.mainService.notifyMessage(err.message, {\n      duration: 10000\n    }));\n  }\n  initConvertion(videoUploadForm) {\n    this.converting$.next(true);\n    const {\n      conversionFrameRate,\n      resolution\n    } = videoUploadForm.value;\n    const options = {\n      videoFps: conversionFrameRate,\n      videoResolution: resolution\n    };\n    let formData = new FormData();\n    formData.append(\"file\", this.uploadedFile);\n    Object.keys(options).forEach(option => formData.append(option, options[option]));\n    this.httpService.apiConvertToGifObservable(formData).subscribe(gifImageBlob => {\n      this.convertGifFromConverterToUrl(gifImageBlob);\n    });\n  }\n}\nUploadFileService.ɵfac = function UploadFileService_Factory(t) {\n  return new (t || UploadFileService)(i0.ɵɵinject(i1.UntypedFormBuilder), i0.ɵɵinject(i2.HttpService), i0.ɵɵinject(i3.MainService), i0.ɵɵinject(i4.DomSanitizer));\n};\nUploadFileService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UploadFileService,\n  factory: UploadFileService.ɵfac,\n  providedIn: \"root\"\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}